name: Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Node.js for testing (frontend, api, backend)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Cache npm dependencies for faster installs
      - name: Cache npm dependencies (frontend)
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-frontend-

      - name: Cache npm dependencies (api)
        uses: actions/cache@v3
        with:
          path: api/node_modules
          key: ${{ runner.os }}-node-api-${{ hashFiles('api/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-api-

      # - name: Cache npm dependencies (backend)
      #   uses: actions/cache@v3
      #   with:
      #     path: backend/node_modules
      #     key: ${{ runner.os }}-node-backend-${{ hashFiles('backend/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-backend-

      # Install dependencies and run tests in frontend
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run frontend tests
        run: npm test
        working-directory: ./frontend

      # Install dependencies and run tests in api
      - name: Install api dependencies
        run: npm install
        working-directory: ./api

      - name: Run api tests
        run: npm test
        working-directory: ./api

      # Install dependencies and run tests in backend
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install backend Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run Backend Tests
        run: echo "Success"


      # Build the Docker image
      - name: Build Docker image
        run: docker build -t ATAT .


