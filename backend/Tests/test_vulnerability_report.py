import pytest
from models.vulnerability_report import VulnerabilityReport
from core.scan_result import ScanResult
from core.endpoint import Endpoint
import datetime

@pytest.fixture
def report():
    return VulnerabilityReport()

@pytest.fixture
def endpoint():
    return Endpoint(
        path="/api/v1/users",
        method="GET",
        summary="Get all users",
        parameters=[],
        request_body=None,
        responses=[{"status_code": 200, "description": "Users retrieved successfully"}],
        tags=["users"]
    )

def test_generate_scan_summary(report, endpoint):
    result1 = ScanResult(
        owasp_category="A01:2021",
        vulnerability_name="SQL Injection",
        endpoint=endpoint,
        severity="High",
        cvss_score=9.0,
        description="A SQL injection vulnerability was detected",
        recommendation="Use prepared statements",
        evidence="Example evidence",
        test_name="SQL Injection Test",
        affected_params=["username", "password"]
    )
    result2 = ScanResult(
        owasp_category="A02:2021",
        vulnerability_name="Cross-Site Scripting",
        endpoint=endpoint,
        severity="Medium",
        cvss_score=6.0,
        description="A cross-site scripting vulnerability was detected",
        recommendation="Use input validation",
        evidence="Example evidence",
        test_name="Cross-Site Scripting Test",
        affected_params=["username"]
    )
    report.add_scan_result(result1)
    report.add_scan_result(result2)
    report.generate_scan_summary()
    assert report.get_scan_summary() == {
        "total_vulnerabilities": 2,
        "high_risk": 1,
        "medium_risk": 1,
        "low_risk": 0
    }

def test_generate_recommendations(report, endpoint):
    result1 = ScanResult(
        owasp_category="A01:2021",
        vulnerability_name="SQL Injection",
        endpoint=endpoint,
        severity="High",
        cvss_score=9.0,
        description="A SQL injection vulnerability was detected",
        recommendation="Use prepared statements",
        evidence="Example evidence",
        test_name="SQL Injection Test",
        affected_params=["username", "password"]
    )
    report.add_scan_result(result1)
    report.generate_recommendations()
    assert report.get_recommendations() == ["Use prepared statements"]

def test_generate_report(report, endpoint):
    result1 = ScanResult(
        owasp_category="A01:2021",
        vulnerability_name="SQL Injection",
        endpoint=endpoint,
        severity="High",
        cvss_score=9.0,
        description="A SQL injection vulnerability was detected",
        recommendation="Use prepared statements",
        evidence="Example evidence",
        test_name="SQL Injection Test",
        affected_params=["username", "password"]
    )
    report.add_scan_result(result1)
    report.generate_scan_summary()
    report_text = report.generate_report()
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"vulnerability_report_{timestamp}.txt"
    with open(filename, "w") as f:
        f.write(report_text)
    assert "Vulnerability Report:" in report_text
    assert "SQL Injection" in report_text