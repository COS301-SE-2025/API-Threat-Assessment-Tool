# defines the VulnerabilityTest as well as specific tests
from enum import Enum
import re
from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.owasp_flags import OWASP_FLAGS, ENDPOINT_FLAGS

# FIX: Updated imports to reflect the new 'vulnerability_tests' subdirectory
from core.vulnerability_tests.BOLA import test_id_tampering
from core.vulnerability_tests.BKEN_AUTH import test_auth_mechanisms
from core.vulnerability_tests.BOPLA import test_property_level_issues
from core.vulnerability_tests.URC import test_resource_consumption
from core.vulnerability_tests.BFLA import test_function_level_auth
from core.vulnerability_tests.UABF import test_business_flows
from core.vulnerability_tests.SSRF import test_ssrf
from core.vulnerability_tests.SEC_MISC import test_misconfig
from core.vulnerability_tests.IIM import test_inventory
from core.vulnerability_tests.UCAPI import test_unsafe_consumption

class VulnerabilityTest:
    def __init__(self):
        self.name = ""
        self.description = ""
        self.risk_level = ""
        self.category = ""
        self.stats = {
            'total_endpoints': 0,
            'vulnerable_endpoints': 0,
            'high_risk': 0,
            'medium_risk': 0,
            'low_risk': 0
        }
        self.flags_set = False

    def update_flags(self):
        self.flags_set = False

    def run_test(self, api_client):
        print("do something")

    def _set_flag(self, api_client):
        # Helper function, call in run_test
        # Set's the appropriate flags for each endpoint in the api_client
        # Make sure to update flags_set to true at the end of each _set_flag
        print("do something")

class BOLA_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BOLA
        self.description = "Tests control issues related to object access with identifiers"
        self.risk_level = "High"
        self.category = "Authorization"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("Setting flags for BOLA")
        
        self.object_id_patterns = [
            r'\{id\}', r'\{userId\}', r'\{user_id\}', r'\{[a-zA-Z]*[Ii]d\}', r'\{[a-zA-Z]*_id\}'
        ]
        self.sensitive_id_patterns = [
            r'\{userId\}', r'\{user_id\}', r'\{accountId\}', r'\{account_id\}', r'\{orderId\}',
            r'\{order_id\}', r'\{documentId\}', r'\{document_id\}', r'\{fileId\}', r'\{file_id\}',
            r'\{resourceId\}', r'\{resource_id\}', r'\{invoiceId\}', r'\{invoice_id\}',
            r'\{sessionId\}', r'\{session_id\}',
        ]

        try:
            for endpoint in api_client.endpoints:
                path = endpoint.path
                if any(re.search(pattern, path) for pattern in self.object_id_patterns):
                    if endpoint.check_auth():
                        if any(re.search(pattern, path) for pattern in self.sensitive_id_patterns):
                            endpoint.add_flag(OWASP_FLAGS.BOLA)
                            self.endpoints.append(endpoint)
            self.flags_set = True
            return ENDPOINT_FLAGS.SUCCESS
        except Exception as e:
            print(f"[ERROR] Failed to set BOLA flag: {e}")
            return ENDPOINT_FLAGS.FAILED

    def run_test(self, api_client):
        print("Starting BOLA Test")
        return test_id_tampering(api_client, self.endpoints, self.risk_level)


class BKEN_AUTH_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BKEN_AUTH
        self.description = "Tests for authentication mechanism weaknesses"
        self.risk_level = "High"
        self.category = "Authentication"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")

    def run_test(self, api_client):
        print("Starting Broken Auth Test")
        return test_auth_mechanisms(api_client, self.endpoints, self.risk_level)

class BOPLA_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BOPLA
        self.description = "Tests for object property level authorization issues"
        self.risk_level = "High"
        self.category = "Authorization"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("Setting flags for BOPLA")
        sensitive_props = [
            "ssn", "social", "password", "pass", "role", "is_admin", "admin",
            "balance", "internal", "profit_margin", "internal_notes", "credit_card",
            "card_number", "secret", "token", "account", "owner_id", "ssn_number"
        ]
        resource_keywords = ["user", "account", "invoice", "order", "customer", "profile"]

        try:
            for endpoint in api_client.endpoints:
                marked = False
                method = (endpoint.method or "").upper()
                path = endpoint.path or ""
                summary = (endpoint.summary or "") + " " + (endpoint.description or "")
                tags = " ".join(endpoint.tags or [])

                rb = endpoint.request_body or {}
                if isinstance(rb, dict) and rb.get("content"):
                    for _, content_schema in rb.get("content", {}).items():
                        schema = content_schema.get("schema", {}) if isinstance(content_schema, dict) else {}
                        props = schema.get("properties", {}) if isinstance(schema.get("properties", {}), dict) else {}
                        for prop in props.keys():
                            if any(sp in prop.lower() for sp in sensitive_props):
                                endpoint.add_flag(OWASP_FLAGS.BOPLA)
                                self.endpoints.append(endpoint)
                                marked = True
                                break
                        if marked: break
                        if schema.get("additionalProperties") is True:
                            endpoint.add_flag(OWASP_FLAGS.BOPLA)
                            self.endpoints.append(endpoint)
                            marked = True
                            break
                    if not marked and method in ("PATCH", "PUT", "POST"):
                        endpoint.add_flag(OWASP_FLAGS.BOPLA)
                        self.endpoints.append(endpoint)
                        marked = True
                if marked: continue

                responses = endpoint.responses or {}
                if isinstance(responses, dict):
                    for resp_info in responses.values():
                        if not isinstance(resp_info, dict): continue
                        contents = resp_info.get("content", {}) if isinstance(resp_info.get("content", {}), dict) else {}
                        for _, content_schema in contents.items():
                            schema = content_schema.get("schema", {}) if isinstance(content_schema, dict) else {}
                            props = schema.get("properties", {}) if isinstance(schema.get("properties", {}), dict) else {}
                            for prop in props.keys():
                                if any(sp in prop.lower() for sp in sensitive_props):
                                    endpoint.add_flag(OWASP_FLAGS.BOPLA)
                                    self.endpoints.append(endpoint)
                                    marked = True
                                    break
                            if marked: break
                            example = content_schema.get("example")
                            if isinstance(example, dict):
                                for k in example.keys():
                                    if any(sp in k.lower() for sp in sensitive_props):
                                        endpoint.add_flag(OWASP_FLAGS.BOPLA)
                                        self.endpoints.append(endpoint)
                                        marked = True
                                        break
                            if marked: break
                        if marked: break
                if marked: continue

                lowered = (path + " " + summary + " " + tags).lower()
                if any(k in lowered for k in resource_keywords) or any(sp in lowered for sp in sensitive_props):
                    if method in ("GET",):
                        endpoint.add_flag(OWASP_FLAGS.BOPLA)
                        self.endpoints.append(endpoint)
                        continue
                    if method in ("PATCH", "PUT", "POST"):
                        endpoint.add_flag(OWASP_FLAGS.BOPLA)
                        self.endpoints.append(endpoint)
                        continue

                for p in endpoint.parameters or []:
                    pname = p.get("name", "").lower()
                    if any(sp in pname for sp in sensitive_props):
                        endpoint.add_flag(OWASP_FLAGS.BOPLA)
                        self.endpoints.append(endpoint)
                        marked = True
                        break
            self.flags_set = True
            return ENDPOINT_FLAGS.SUCCESS
        except Exception as e:
            print(f"[ERROR] Failed to set BOPLA flag: {e}")
            return ENDPOINT_FLAGS.FAILED

    def run_test(self, api_client):
        print("Starting BOPLA Test")
        return test_property_level_issues(api_client, self.endpoints, self.risk_level)


class URC_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.URC
        self.description = "Tests for unrestricted resource consumption vulnerabilities"
        self.risk_level = "Medium"
        self.category = "Resource Management"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("Setting flags for URC")
        try:
            for endpoint in api_client.endpoints:
                if endpoint.method in ["POST", "PUT", "PATCH"]:
                    endpoint.add_flag(OWASP_FLAGS.URC)
                    self.endpoints.append(endpoint)
            self.flags_set = True
            return ENDPOINT_FLAGS.SUCCESS
        except Exception as e:
            print(f"[ERROR] Failed to set URC flag: {e}")
            return ENDPOINT_FLAGS.FAILED
    def run_test(self, api_client):
        print("Starting URC Test")
        return test_resource_consumption(api_client, self.endpoints, self.risk_level)

class BFLA_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BFLA
        self.description = "Tests for function level authorization issues"
        self.risk_level = "High"
        self.category = "Authorization"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("Setting flags for BFLA")
        try:
            self.endpoints = []
            keywords_admin = ["admin", "/admin/", "promote", "internal", "delete user", "delete-user", "delete_user"]
            for endpoint in api_client.endpoints:
                path = (endpoint.path or "").lower()
                summary = (endpoint.summary or "").lower()
                desc = (endpoint.description or "").lower()
                combined = " ".join([path, summary, desc])
                if any(k in combined for k in keywords_admin):
                    if OWASP_FLAGS.BFLA not in endpoint.get_flags():
                        endpoint.add_flag(OWASP_FLAGS.BFLA)
                    if endpoint not in self.endpoints:
                        self.endpoints.append(endpoint)
                for t in endpoint.tags or []:
                    if isinstance(t, str) and ("admin" in t.lower() or "internal" in t.lower()):
                        if OWASP_FLAGS.BFLA not in endpoint.get_flags():
                            endpoint.add_flag(OWASP_FLAGS.BFLA)
                        if endpoint not in self.endpoints:
                            self.endpoints.append(endpoint)
                        break
            self.flags_set = True
            return ENDPOINT_FLAGS.SUCCESS
        except Exception:
            return ENDPOINT_FLAGS.FAILED

    def run_test(self, api_client):
        print("Starting BFLA Test")
        return test_function_level_auth(api_client, self.endpoints, self.risk_level)

class UABF_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.UABF
        self.description = "Tests for unrestricted access to sensitive business flows"
        self.risk_level = "Medium"
        self.category = "Business Logic"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("Setting flags for UABF")
        try:
            for endpoint in api_client.endpoints:
                if "sensitive" in endpoint.description.lower() or "business" in endpoint.description.lower():
                    endpoint.add_flag(OWASP_FLAGS.UABF)
                    self.endpoints.append(endpoint)
            self.flags_set = True
            return ENDPOINT_FLAGS.SUCCESS
        except Exception as e:
            print(f"[ERROR] Failed to set UABF flag: {e}")
            return ENDPOINT_FLAGS.FAILED
          
    def run_test(self, api_client):
        print("Starting UABF Test")
        return test_business_flows(api_client, self.endpoints, self.risk_level)

class SSRF_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.SSRF
        self.description = "Tests for server side request forgery vulnerabilities"
        self.risk_level = "High"
        self.category = "Input Validation"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("Setting flags for SSRF")
        self.endpoints = []
        keywords = ["ssrf", "fetch", "webhook", "proxy"]
        for endpoint in api_client.endpoints:
            path = (endpoint.path or "").lower()
            summary = (endpoint.summary or "").lower()
            desc = (endpoint.description or "").lower()
            combined = " ".join([path, summary, desc])
            if any(k in combined for k in keywords):
                if OWASP_FLAGS.SSRF not in endpoint.get_flags():
                    endpoint.add_flag(OWASP_FLAGS.SSRF)
                self.endpoints.append(endpoint)
        self.flags_set = True
        return ENDPOINT_FLAGS.SUCCESS if self.endpoints else ENDPOINT_FLAGS.FAILED

    def run_test(self, api_client):
        print("Starting SSRF Test")
        return test_ssrf(api_client, self.endpoints, self.risk_level)



class SEC_MISC_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.SEC_MISC
        self.description = "Tests for security misconfigurations"
        self.risk_level = "Medium"
        self.category = "Configuration"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("Setting flags for SEC_MISC")
        try:
            for endpoint in api_client.endpoints:
                if "security" in endpoint.description.lower() or "misconfiguration" in endpoint.description.lower():
                    endpoint.add_flag(OWASP_FLAGS.SEC_MISC)
                    self.endpoints.append(endpoint)
            self.flags_set = True
            return ENDPOINT_FLAGS.SUCCESS
        except Exception as e:
            print(f"[ERROR] Failed to set SEC_MISC flag: {e}")
            return ENDPOINT_FLAGS.FAILED
    def run_test(self, api_client):
        print("Starting SED MISC Test")
        return test_misconfig(api_client, self.endpoints, self.risk_level)

class IIM_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.IIM
        self.description = "Tests for improper inventory management issues"
        self.risk_level = "Low"
        self.category = "Asset Management"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("Setting flags for IIM")
        try:
            self.endpoints = []
            keywords = ["v1/", "/beta", "beta", "deprecated", "experimental", "legacy", "old"]
            version_map = {}
            for ep in api_client.endpoints:
                p = (ep.path or "").lower()
                m = re.search(r"/v(\d+)/", p)
                version = m.group(1) if m else None
                norm = re.sub(r"/v\d+/", "/", p) if version else p
                version_map.setdefault(norm, set())
                if version:
                    version_map[norm].add(version)

            for endpoint in api_client.endpoints:
                path = (endpoint.path or "").lower()
                summary = (endpoint.summary or "").lower()
                desc = (endpoint.description or "").lower()
                combined = " ".join([path, summary, desc])
                flagged = False
                if any(k in combined for k in keywords):
                    flagged = True
                norm = re.sub(r"/v\d+/", "/", path)
                versions = version_map.get(norm, set())
                if len(versions) > 1:
                    flagged = True
                if flagged:
                    if OWASP_FLAGS.IIM not in endpoint.get_flags():
                        endpoint.add_flag(OWASP_FLAGS.IIM)
                    if endpoint not in self.endpoints:
                        self.endpoints.append(endpoint)
            self.flags_set = True
            return ENDPOINT_FLAGS.SUCCESS
        except Exception:
            return ENDPOINT_FLAGS.FAILED

    def run_test(self, api_client):
        print("Starting IIM Test")
        return test_inventory(api_client, self.endpoints, self.risk_level)



class UCAPI_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.UCAPI
        self.description = "Tests for unsafe consumption of APIs"
        self.risk_level = "Medium"
        self.category = "API Security"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("Setting flags for UCAPI")
        try:
            for endpoint in api_client.endpoints:
                if "api" in endpoint.description.lower() or "consume" in endpoint.description.lower():
                    endpoint.add_flag(OWASP_FLAGS.UCAPI)
                    self.endpoints.append(endpoint)
            self.flags_set = True
            return ENDPOINT_FLAGS.SUCCESS
        except Exception as e:
            print(f"[ERROR] Failed to set UCAPI flag: {e}")
            return ENDPOINT_FLAGS.FAILED

    def run_test(self, api_client):
        print("Starting UCAPI Test")
        return test_unsafe_consumption(api_client, self.endpoints, self.risk_level)
