# defines the VulnerabilityTest as well as specific tests
from enum import Enum
import re
from core.scan_result import ScanResult
from core.http_interface import HTTPInterface

class VulnerabilityTest:
    def __init__(self):
        self.name = ""
        self.description = ""
        self.risk_level = ""
        self.category = ""
        self.stats = {
            'total_endpoints': 0,
            'vulnerable_endpoints': 0,
            'high_risk': 0,
            'medium_risk': 0,
            'low_risk': 0
        }
        self.flags_set = False

    def update_flags(self):
        self.flags_set = False

    def run_test(self, api_client):
        print("do something")

    def _set_flag(self, api_client):
        # Helper function, call in run_test
        # Set's the appropriate flags for each endpoint in the api_client
        # Make sure to update flags_set to true at the end of each _set_flag
        print("do something")

#Flags enum
class OWASP_FLAGS(Enum):
    BOLA = "1. Broken Object Level Authorization"
    BKEN_AUTH = "2. Broken Authentication"
    BOPLA = "3. Broken Object Property Level Authorization"
    URC = "4. Unrestricted Resource Consumption"
    BFLA = "5. Broken Function Level Authorization"
    UABF = "6. Unrestricted Access to Sensitive Business Flows"
    SSRF = "7. Server Side Request Forgery"
    SEC_MISC = "8. Security Misconfiguration"
    IIM = "9. Improper Inventory Management"
    UCAPI = "10. Unsafe Consumption of APIs"

# Used to describe Failure cases when attempting to set flags
class ENDPOINT_FLAGS(Enum):
    SUCCESS = "Flag Set"
    FAILED = "Failed to set flags for endpoints"

class BOLA_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BOLA
        self.description = "Tests control issues related to object access with identifiers"
        self.risk_level = "High"
        self.category = "Authorization"
        self.endpoints = []

    def _set_flag(self, api_client):
        # if self.flags_set == True:
        #     return ENDPOINT_FLAGS.SUCCESS
        #     

        self.object_id_patterns = [
            r'\{id\}',
            r'\{userId\}',
            r'\{user_id\}',
            r'\{[a-zA-Z]*[Ii]d\}',
            r'\{[a-zA-Z]*_id\}'
        ]

        self.sensitive_id_patterns = [
            r'\{userId\}',
            r'\{user_id\}',
            r'\{accountId\}',
            r'\{account_id\}',
            r'\{orderId\}',
            r'\{order_id\}',
            r'\{documentId\}',
            r'\{document_id\}',
            r'\{fileId\}',
            r'\{file_id\}',
            r'\{resourceId\}',
            r'\{resource_id\}',
            r'\{invoiceId\}',
            r'\{invoice_id\}',
            r'\{sessionId\}',
            r'\{session_id\}',
        ]

        # Iterate throuh each endpoint in the api client
        # If it matches the below criteria criteria use endpoint.add_flag(OWASP_FLAGS.BOLA)
        # Criteria: 
            # endpoint.path must have a regex match in object_id_patterns
                # endpoint.check_auth() is true
                # matches someting in sensitive_id_patterns
        # if something goes wrong return ENDPOINT_FLAGS.FAILED

        try:
            for endpoint in api_client.endpoints:
                path = endpoint.path
                # print(f"Flag Check: {path}")

                if any(re.search(pattern, path) for pattern in self.object_id_patterns):
                    if endpoint.check_auth():
                        if any(re.search(pattern, path) for pattern in self.sensitive_id_patterns):
                            endpoint.add_flag(OWASP_FLAGS.BOLA)
                            self.endpoints.append(endpoint)

            self.flags_set = True
            return ENDPOINT_FLAGS.SUCCESS

        except Exception as e:
            print(f"[ERROR] Failed to set BOLA flag: {e}")
            return ENDPOINT_FLAGS.FAILED
    
    
#Things to try
    # Use api key to store valid information, try to tamper with this information to access other data
    # ID tampering
    # Look at server responses 
    # accessing objects: /orders?id=123 and /orders/{id}
    # OpenAPI may reveal data type in the spec?
    # heuristics: look for int, try to incement, look for uuid etc

    def run_test(self, api_client):
    # Assume api_client.auth_token is set and valid

        if self._set_flag(api_client) != ENDPOINT_FLAGS.SUCCESS:
            print("Failed to set flags")
            return

        url = api_client.get_url()
        http_interface = HTTPInterface(url)
        http_interface.add_header(api_client.get_auth_header())

        for endpoint in self.endpoints:
            if OWASP_FLAGS.BOLA not in endpoint.get_flags():
                continue 

            # print(f"[Testing] {endpoint.method} {endpoint.path}")

            #try to extract ID 
            candidate_ids = []
            for param in endpoint.parameters:
                name = param.get("name", "")
                if "id" in name.lower():
                    schema = param.get("schema", {})
                    param_type = schema.get("type", "string")

                    #generate test id's
                    if param_type == "integer":
                        candidate_ids.extend(["1", "2", "999", "1001"])
                    elif param_type == "string":
                        candidate_ids.extend([
                            "11111111-1111-1111-1111-111111111111",  # UUID
                            "not-a-valid-id", 
                            "test", 
                            "123456"
                        ])

            #test tampered id's
            for test_id in candidate_ids:
                test_path = endpoint.path
                if "{" in test_path:
                    test_path = re.sub(r"\{[^}]*id[^}]*\}", test_id, test_path, flags=re.IGNORECASE)

                params = {}
                for param in endpoint.parameters:
                    if param.get("in") == "query" and "id" in param.get("name", "").lower():
                        params[param["name"]] = test_id

                response = http_interface.send_custom(endpoint.method, test_path, params=params)
                # print(f"  -> {response.status_code} for ID: {test_id}")

                #Return scan_result object
                if response.status_code == 200:
                    # print("  [!] Potential BOLA: Access granted with tampered ID")
                    # return scan result
                    scan_evidence = f"Method: {endpoint.method}\nPath: {test_path}\nParameters: {params}"
                    sr = ScanResult(
                        1,
                        OWASP_FLAGS.BOLA.value,
                        endpoint,
                        self.risk_level, 
                        10,
                        "Endpoint allows us to access data of other users by tampering with id's",
                        "Properly authenticate before returning data",
                        scan_evidence,
                        "Basic ID tampering",
                        params
                        )

                    return sr
                elif response.status_code == 401:
                    endpoint.add_flag(ENDPOINT_FLAGS.FAILED)


class BKEN_AUTH_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BKEN_AUTH
        self.description = "Tests for authentication mechanism weaknesses"
        self.risk_level = "High"
        self.category = "Authentication"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")

    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class BOPLA_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BOPLA
        self.description = "Tests for object property level authorization issues"
        self.risk_level = "High"
        self.category = "Authorization"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class URC_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.URC
        self.description = "Tests for unrestricted resource consumption vulnerabilities"
        self.risk_level = "Medium"
        self.category = "Resource Management"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class BFLA_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BFLA
        self.description = "Tests for function level authorization issues"
        self.risk_level = "High"
        self.category = "Authorization"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class UABF_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.UABF
        self.description = "Tests for unrestricted access to sensitive business flows"
        self.risk_level = "Medium"
        self.category = "Business Logic"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class SSRF_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.SSRF
        self.description = "Tests for server side request forgery vulnerabilities"
        self.risk_level = "High"
        self.category = "Input Validation"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class SEC_MISC_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.SEC_MISC
        self.description = "Tests for security misconfigurations"
        self.risk_level = "Medium"
        self.category = "Configuration"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class IIM_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.IIM
        self.description = "Tests for improper inventory management issues"
        self.risk_level = "Low"
        self.category = "Asset Management"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class UCAPI_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.UCAPI
        self.description = "Tests for unsafe consumption of APIs"
        self.risk_level = "Medium"
        self.category = "API Security"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")

