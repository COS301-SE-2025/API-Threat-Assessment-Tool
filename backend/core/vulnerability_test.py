# # defines the VulnerabilityTest as well as specific tests


# class VulnerabilityTest:
#     def __init__(self):
#         self.name = ""
#         self.description = ""
#         self.risk_level = ""
#         self.category = ""

#     def run_test(api_client):
#         print("do something")

# # Chat generated stuff below, delete and rewite when implementing
# class BruteForceTest(VulnerabilityTest):
#     constructor():
#         set name = "Brute Force Attack"
#         set description = "Tests if login endpoints are vulnerable to brute-forcing"
#         set risk_level = "High"
#         set category = "Authentication"

#     function run_test(api_client):
#         for each endpoint in api_client.discovered_endpoints:
#             if endpoint.url contains "login" and endpoint.method == "POST":
#                 for username in common_usernames:
#                     for password in weak_passwords:
#                         request = create_login_request(endpoint, username, password)
#                         response = api_client.http_client.send_post(request)
#                         if response indicates success:
#                             record positive finding with evidence

# class InjectionTest(VulnerabilityTest):
#     constructor():
#         set name = "Injection Vulnerability"
#         set description = "Checks for SQL/NoSQL/command injection"
#         set risk_level = "Critical"
#         set category = "Injection"

#     function run_test(api_client):
#         payloads = ["' OR 1=1--", "'; DROP TABLE users; --", '{"$ne": null}']
#         for each endpoint in api_client.discovered_endpoints:
#             if endpoint.method in ["GET", "POST"]:
#                 for param in endpoint.parameters:
#                     for payload in payloads:
#                         tampered_params = clone_and_inject(endpoint.parameters, param, payload)
#                         request = endpoint.to_request(params=tampered_params)
#                         response = api_client.http_client.send_custom_request(request)
#                         if response.status_code == 500 or unusual behavior:
#                             record finding with payload and response

# class AuthenticationTest(VulnerabilityTest):
#     constructor():
#         set name = "Authentication Check"
#         set description = "Tests access to protected endpoints without proper auth"
#         set risk_level = "Medium"
#         set category = "Access Control"

#     function run_test(api_client):
#         for endpoint in api_client.discovered_endpoints:
#             if endpoint.requires_auth:
#                 request = endpoint.to_request()
#                 remove_auth_headers(request)
#                 response = api_client.http_client.send_custom_request(request)
#                 if response.status_code == 200:
#                     record finding - endpoint accessible without auth

# defines the VulnerabilityTest as well as specific tests
class VulnerabilityTest:
    def __init__(self):
        self.name = ""
        self.description = ""
        self.risk_level = ""
        self.category = ""

    def run_test(self, api_client):
        print("do something")

# Chat generated stuff below, delete and rewrite when implementing
class BruteForceTest(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = "Brute Force Attack"
        self.description = "Tests if login endpoints are vulnerable to brute-forcing"
        self.risk_level = "High"
        self.category = "Authentication"

    def run_test(self, api_client):
        for endpoint in api_client.discovered_endpoints:
            if "login" in endpoint.url and endpoint.method == "POST":
                for username in common_usernames:
                    for password in weak_passwords:
                        request = create_login_request(endpoint, username, password)
                        response = api_client.http_client.send_post(request)
                        if response.status_code == 200:  # indicates success
                            # record positive finding with evidence
                            pass

class InjectionTest(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = "Injection Vulnerability"
        self.description = "Checks for SQL/NoSQL/command injection"
        self.risk_level = "Critical"
        self.category = "Injection"

    def run_test(self, api_client):
        payloads = ["' OR 1=1--", "'; DROP TABLE users; --", '{"$ne": null}']
        for endpoint in api_client.discovered_endpoints:
            if endpoint.method in ["GET", "POST"]:
                for param in endpoint.parameters:
                    for payload in payloads:
                        tampered_params = clone_and_inject(endpoint.parameters, param, payload)
                        request = endpoint.to_request(params=tampered_params)
                        response = api_client.http_client.send_custom_request(request)
                        if response.status_code == 500:  # or unusual behavior
                            # record finding with payload and response
                            pass

class AuthenticationTest(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = "Authentication Check"
        self.description = "Tests access to protected endpoints without proper auth"
        self.risk_level = "Medium"
        self.category = "Access Control"

    def run_test(self, api_client):
        for endpoint in api_client.discovered_endpoints:
            if endpoint.requires_auth:
                request = endpoint.to_request()
                remove_auth_headers(request)
                response = api_client.http_client.send_custom_request(request)
                if response.status_code == 200:
                    # record finding - endpoint accessible without auth
                    pass