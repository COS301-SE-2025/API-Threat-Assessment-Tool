# # defines the VulnerabilityTest as well as specific tests
from enum import Enum

class VulnerabilityTest:
    def __init__(self):
        self.name = ""
        self.description = ""
        self.risk_level = ""
        self.category = ""
        self.stats = {
            'total_endpoints': 0,
            'vulnerable_endpoints': 0,
            'high_risk': 0,
            'medium_risk': 0,
            'low_risk': 0
        }

    def run_test(self, api_client):
        print("do something")

    def _set_flag(self, api_client):
        # Helper function, call in run_test
        # Set's the appropriate flags for each endpoint in the api_client
        print("do something")

#Flags enum
class OWASP_FLAGS(Enum):
    BOLA = "1. Broken Object Level Authorization"
    BKEN_AUTH = "2. Broken Authentication"
    BOPLA = "3. Broken Object Property Level Authorization"
    URC = "4. Unrestricted Resource Consumption"
    BFLA = "5. Broken Function Level Authorization"
    UABF = "6. Unrestricted Access to Sensitive Business Flows"
    SSRF = "7. Server Side Request Forgery"
    SEC_MISC = "8. Security Misconfiguration"
    IIM = "9. Improper Inventory Management"
    UCAPI = "10. Unsafe Consumption of APIs"


class BOLA_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BOLA
        self.description = "Tests control issues related to object access with identifiers"
        self.risk_level = "High"
        self.category = "Authorization"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class BKEN_AUTH_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BKEN_AUTH
        self.description = "Tests for authentication mechanism weaknesses"
        self.risk_level = "High"
        self.category = "Authentication"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class BOPLA_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BOPLA
        self.description = "Tests for object property level authorization issues"
        self.risk_level = "High"
        self.category = "Authorization"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class URC_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.URC
        self.description = "Tests for unrestricted resource consumption vulnerabilities"
        self.risk_level = "Medium"
        self.category = "Resource Management"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class BFLA_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.BFLA
        self.description = "Tests for function level authorization issues"
        self.risk_level = "High"
        self.category = "Authorization"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class UABF_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.UABF
        self.description = "Tests for unrestricted access to sensitive business flows"
        self.risk_level = "Medium"
        self.category = "Business Logic"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class SSRF_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.SSRF
        self.description = "Tests for server side request forgery vulnerabilities"
        self.risk_level = "High"
        self.category = "Input Validation"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class SEC_MISC_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.SEC_MISC
        self.description = "Tests for security misconfigurations"
        self.risk_level = "Medium"
        self.category = "Configuration"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class IIM_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.IIM
        self.description = "Tests for improper inventory management issues"
        self.risk_level = "Low"
        self.category = "Asset Management"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")




class UCAPI_Scan(VulnerabilityTest):
    def __init__(self):
        super().__init__()
        self.name = OWASP_FLAGS.UCAPI
        self.description = "Tests for unsafe consumption of APIs"
        self.risk_level = "Medium"
        self.category = "API Security"
        self.endpoints = []

    def _set_flag(self, api_client):
        print("do something")
    
    def run_test(self, api_client):
        self._set_flag(api_client)
        print("do something")

