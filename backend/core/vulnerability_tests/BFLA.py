# core/vulnerability_tests/BFLA.py

from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.owasp_flags import OWASP_FLAGS
import re

def test_function_level_auth(api_client, endpoints, risk_level):
    base_url = api_client.get_url()
    http_interface = HTTPInterface(base_url)
    try:
        http_interface.add_header(api_client.get_auth_header())
    except Exception:
        pass

    results = []

    def _choose_replacement(ep):
        try:
            for p in ep.parameters or []:
                pname = p.get("name", "").lower()
                schema = p.get("schema", {}) or {}
                if "id" in pname:
                    return "1" if schema.get("type") == "integer" else "11111111-1111-1111-1111-111111111111"
        except Exception:
            pass
        return "1"

    for endpoint in endpoints:
        if OWASP_FLAGS.BFLA not in endpoint.get_flags() or OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue
            
        method = (endpoint.method or "").upper()
        path = endpoint.path or ""
        test_path = path

        if "{" in test_path:
            replacement = _choose_replacement(endpoint)
            test_path = re.sub(r"\{[^}]*\}", replacement, test_path)

        if method in ("DELETE", "POST", "PUT", "PATCH"):
            try:
                http_interface.clear_body()
                resp = http_interface.send_custom(method, test_path)
            except Exception:
                resp = None

            if resp and resp.status_code in (200, 201, 204):
                body_text = "<no-body>"
                try:
                    body_text = resp.json()
                except Exception:
                    body_text = resp.text or ""

                scan_evidence = f"Method: {method}\nPath: {test_path}\nStatus: {resp.status_code}"
                sr = ScanResult(
                    owasp_category=OWASP_FLAGS.BFLA.value,
                    vulnerability_name="5. Potential BFLA (Stateless Test)",
                    endpoint=endpoint,
                    severity=risk_level,
                    description="A potentially privileged function executed successfully. This requires manual verification to confirm if the user context was indeed low-privilege.",
                    recommendation="Enforce role/permission checks for all sensitive business functions.",
                    evidence={"details": scan_evidence, "response": body_text},
                    test_name="Privileged Function Execution",
                    affected_params={"status": resp.status_code}
                )
                results.append(sr)
            
            http_interface.clear_body()

    return results

def test_bfla_access_control_matrix(api_client, admin_endpoints, risk_level):
    """
    Tests for BFLA by comparing what an admin can access vs. what a regular user can access.
    """
    results = []
    admin_token = api_client.get_auth_header()
    user_token = api_client.get_secondary_auth_header()

    if not user_token:
        print("[INFO] BFLA Access Control Matrix test skipped: Secondary (low-privilege) auth token not provided.")
        return results

    print("[*] Starting BFLA Access Control Matrix test...")
    
    admin_accessible_functions = set()
    admin_http = HTTPInterface(api_client.get_url())
    admin_http.add_header(admin_token)

    # Step 1: Establish baseline of what the admin user can access from the sensitive endpoint list
    for endpoint in admin_endpoints:
        if OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue

        response = admin_http.send_custom(endpoint.method, endpoint.path)
        if 200 <= response.status_code < 300:
            admin_accessible_functions.add((endpoint.method, endpoint.path, endpoint))
            print(f"  [Admin Baseline] OK: {endpoint.method} {endpoint.path}")

    if not admin_accessible_functions:
        print("[INFO] No admin-accessible functions confirmed from flagged endpoints to test against.")
        return results
    
    # Step 2: Attempt to access the same functions as the low-privilege user
    user_http = HTTPInterface(api_client.get_url())
    user_http.add_header(user_token)

    print("[*] Testing for access violations with user credentials...")
    for method, path, endpoint in admin_accessible_functions:
        response = user_http.send_custom(method, path)
        
        if 200 <= response.status_code < 300:
            scan_evidence = (
                f"High-privilege endpoint: {method} {path}\n"
                f"A high-privilege user (admin) can access this endpoint successfully.\n"
                f"A low-privilege user also successfully accessed it with status code: {response.status_code}."
            )
            sr = ScanResult(
                owasp_category=OWASP_FLAGS.BFLA.value,
                vulnerability_name="5. Broken Function Level Authorization",
                endpoint=endpoint,
                severity=risk_level,
                description="A low-privilege user was able to successfully access an endpoint that should only be accessible to high-privilege users (e.g., administrators).",
                recommendation="Implement and enforce robust, role-based access control checks on the server-side for every request to a sensitive function.",
                evidence=scan_evidence,
                test_name="Access Control Matrix Violation"
            )
            results.append(sr)
            print(f"[!!!] VULNERABILITY FOUND: BFLA at {method} {path} for regular user.")
        else:
            print(f"  [User Test] OK: Access correctly denied for {method} {path} with status {response.status_code}")
            
    return results