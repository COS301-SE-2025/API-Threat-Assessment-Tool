from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.vulnerability_test import OWASP_FLAGS
import re

def test_function_level_auth(api_client, endpoints, risk_level):
    print("Starting BFLA Test")
    base_url = api_client.get_url()
    http_interface = HTTPInterface(base_url)
    try:
        http_interface.add_header(api_client.get_auth_header())
    except Exception:
        pass
    results = []

    sensitive_keys_in_config = [
        "database_url", "api_key", "api_keys", "secret", "debug",
        "password", "token", "api_keys", "debug_mode"
    ]

    def _choose_replacement(ep):
        try:
            for p in ep.parameters or []:
                pname = p.get("name", "").lower()
                schema = p.get("schema", {}) or {}
                if "id" in pname:
                    if schema.get("type") == "integer":
                        return "1"
                    else:
                        return "11111111-1111-1111-1111-111111111111"
        except Exception:
            pass
        return "1"

    for endpoint in endpoints:
        if OWASP_FLAGS.BFLA not in endpoint.get_flags():
            continue
        if OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue

        method = (endpoint.method or "").upper()
        test_path = endpoint.path or ""

        if "{" in test_path:
            test_path = re.sub(r"\{[^}]*\}", _choose_replacement(endpoint), test_path)

        if method == "GET":
            try:
                resp = http_interface.send_custom("GET", test_path)
                if resp and resp.status_code == 200:
                    try:
                        body = resp.json()
                    except Exception:
                        body = None
                    found = []
                    if isinstance(body, dict):
                        for k in body.keys():
                            if any(sk in k.lower() for sk in sensitive_keys_in_config):
                                found.append(k)
                    if found:
                        scan_evidence = f"Method: GET\nPath: {test_path}\nReturned keys: {found}\nStatus: {resp.status_code}"
                        sr = ScanResult(
                            5,
                            OWASP_FLAGS.BFLA.value,
                            endpoint,
                            risk_level,
                            9,
                            "Internal/admin GET endpoint returns sensitive configuration or secrets.",
                            "Restrict access to internal/admin endpoints by enforcing proper role checks and remove secrets from responses.",
                            scan_evidence,
                            "Exposed internal/admin data",
                            {"returned_keys": found}
                        )
                        results.append(sr)
            except Exception:
                continue

        elif method in ("DELETE", "POST", "PUT", "PATCH"):
            try:
                http_interface.clear_body()
                resp = http_interface.send_custom(method, test_path)
                if resp and resp.status_code in (200, 201, 204):
                    sr = ScanResult(
