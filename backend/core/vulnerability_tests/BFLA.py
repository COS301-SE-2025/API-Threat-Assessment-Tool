# core/vulnerability_tests/BFLA.py

from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.owasp_flags import OWASP_FLAGS
import re

# --- Original function, preserved for unit tests ---
def test_function_level_auth(api_client, endpoints, risk_level):
    base_url = api_client.get_url()
    http_interface = HTTPInterface(base_url)

    # best-effort auth header
    try:
        auth_hdr = api_client.get_auth_header()
        http_interface.add_header(auth_hdr)
    except Exception:
        pass

    results = []

    # Helper: choose replacement for path params. If possible, probe collection endpoints to find a valid id.
    def _choose_replacement(ep):
        # 1) try to use schema if present
        try:
            for p in ep.parameters or []:
                pname = p.get("name", "").lower()
                schema = p.get("schema", {}) or {}
                if "id" in pname:
                    if schema.get("type") == "integer":
                        return "1"
                    else:
                        return "11111111-1111-1111-1111-111111111111"
        except Exception:
            pass

        # 2) try to find a collection endpoint to discover an existing id (best-effort)
        try:
            for e2 in api_client.endpoints:
                if e2.method and e2.method.upper() == "GET":
                    if e2.path and e2.path.rstrip("/").endswith("/users"):
                        try:
                            resp = http_interface.send_custom("GET", e2.path)
                            if resp and resp.status_code == 200:
                                try:
                                    body = resp.json()
                                except Exception:
                                    body = None
                                if isinstance(body, list) and len(body) > 0:
                                    first = body[0]
                                    if isinstance(first, dict):
                                        for k in ("id", "user_id", "userId", "uid"):
                                            if k in first:
                                                return str(first[k])
                                        for v in first.values():
                                            if isinstance(v, int):
                                                return str(v)
                                    elif isinstance(first, int):
                                        return str(first)
                        except Exception:
                            pass
            return "1"
        except Exception:
            return "1"

    sensitive_keys_in_config = [
        "database_url", "api_key", "api_keys", "secret", "debug",
        "password", "token", "api_keys", "debug_mode"
    ]


    for endpoint in endpoints:
        if OWASP_FLAGS.BFLA not in endpoint.get_flags():
            continue

        if OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue
            
        method = (endpoint.method or "").upper()
        path = endpoint.path or ""
        test_path = path

        if "{" in test_path:
            replacement = _choose_replacement(endpoint)
            test_path = re.sub(r"\{[^}]*\}", replacement, test_path)

        if method == "GET":
            try:
                resp = http_interface.send_custom("GET", test_path)
            except Exception:
                continue

            if resp is None:
                continue

            body = None
            try:
                body = resp.json()
            except Exception:
                pass

            try:
                found = []
                if isinstance(body, dict):
                    for k in body.keys():
                        if any(sk in k.lower() for sk in sensitive_keys_in_config):
                            found.append(k)
                    if not found:
                        for v in body.values():
                            if isinstance(v, dict):
                                for k2 in v.keys():
                                    if any(sk in k2.lower() for sk in sensitive_keys_in_config):
                                        found.append(k2)
                elif isinstance(body, list) and len(body) > 0:
                    limit = min(5, len(body))
                    for i in range(limit):
                        item = body[i]
                        if isinstance(item, dict):
                            for k in item.keys():
                                if any(sk in k.lower() for sk in sensitive_keys_in_config):
                                    if k not in found:
                                        found.append(k)
                if found:
                    scan_evidence = f"Method: GET\nPath: {test_path}\nReturned keys: {found}\nStatus: {resp.status_code}"
                    sr = ScanResult(
                        5,
                        OWASP_FLAGS.BFLA.value,
                        endpoint,
                        risk_level,
                        9,
                        "Internal/admin GET endpoint returns sensitive configuration or secrets.",
                        "Restrict access to internal/admin endpoints by enforcing proper role checks and remove secrets from responses.",
                        scan_evidence,
                        "Exposed internal/admin data",
                        {"returned_keys": found}
                    )
                    results.append(sr)
            except Exception:
                pass
            continue

        if method in ("DELETE", "POST", "PUT", "PATCH"):
            try:
                http_interface.clear_body()
                resp = http_interface.send_custom(method, test_path)
            except Exception:
                resp = None

            if resp is None or resp.status_code == 404:
                alt_id = None
                try:
                    for e2 in api_client.endpoints:
                        if e2.method and e2.method.upper() == "GET" and e2.path and e2.path.rstrip("/").endswith("/users"):
                            try:
                                discovered = http_interface.send_custom("GET", e2.path)
                                if discovered and discovered.status_code == 200:
                                    try:
                                        body = discovered.json()
                                    except Exception:
                                        body = None
                                    if isinstance(body, list) and len(body) > 0:
                                        first = body[0]
                                        if isinstance(first, dict):
                                            for k in ("id", "user_id", "userId", "uid"):
                                                if k in first:
                                                    alt_id = str(first[k])
                                                    break
                                            if alt_id is None:
                                                for v in first.values():
                                                    if isinstance(v, int):
                                                        alt_id = str(v)
                                                        break
                                        elif isinstance(first, int):
                                            alt_id = str(first)
                                if alt_id:
                                    break
                            except Exception:
                                continue
                except Exception:
                    alt_id = None

                if alt_id:
                    retry_path = re.sub(r"\{[^}]*\}", alt_id, path)
                    try:
                        resp = http_interface.send_custom(method, retry_path)
                        test_path = retry_path
                    except Exception:
                        pass

            if resp is None:
                continue

            try:
                if resp.status_code in (200, 201, 204):
                    body_text = "<no-body>"
                    try:
                        body_text = resp.json()
                    except Exception:
                        try:
                            body_text = resp.text
                        except Exception:
                            pass

                    scan_evidence = f"Method: {method}\nPath: {test_path}\nStatus: {resp.status_code}\nResponse: {body_text}"
                    sr = ScanResult(
                        5,
                        OWASP_FLAGS.BFLA.value,
                        endpoint,
                        risk_level,
                        10,
                        "Privileged function executed without proper function/role-level authorization.",
                        "Enforce role/permission checks for privileged functions and ensure least privilege controls.",
                        scan_evidence,
                        "Function executed without proper authorization",
                        {"status": resp.status_code, "response": body_text}
                    )
                    results.append(sr)
            except Exception:
                pass
            finally:
                http_interface.clear_body()

    return results

# --- New, advanced stateful test for BFLA ---
def test_bfla_access_control_matrix(api_client, admin_endpoints, risk_level):
    """
    Tests for BFLA by comparing what an admin can access vs. what a regular user can access.
    """
    results = []
    admin_token = api_client.get_auth_header()
    user_token = api_client.get_secondary_auth_header()

    if not user_token:
        print("[INFO] BFLA Access Control Matrix test skipped: Secondary (low-privilege) auth token not provided.")
        return results

    print("[*] Starting BFLA Access Control Matrix test...")
    
    admin_accessible_functions = set()
    admin_http = HTTPInterface(api_client.get_url())
    admin_http.add_header(admin_token)

    # Step 1: Establish baseline of what the admin user can access from the sensitive endpoint list
    for endpoint in admin_endpoints:
        response = admin_http.send_custom(endpoint.method, endpoint.path)
        if 200 <= response.status_code < 300:
            admin_accessible_functions.add((endpoint.method, endpoint.path, endpoint))
            print(f"  [Admin Baseline] OK: {endpoint.method} {endpoint.path}")

    if not admin_accessible_functions:
        print("[INFO] No admin-accessible functions confirmed from flagged endpoints to test against.")
        return results
    
    # Step 2: Attempt to access the same functions as the low-privilege user
    user_http = HTTPInterface(api_client.get_url())
    user_http.add_header(user_token)

    print("[*] Testing for access violations with user credentials...")
    for method, path, endpoint in admin_accessible_functions:
        response = user_http.send_custom(method, path)
        
        if 200 <= response.status_code < 300:
            scan_evidence = (
                f"High-privilege endpoint: {method} {path}\n"
                f"A high-privilege user (admin) can access this endpoint successfully.\n"
                f"A low-privilege user also successfully accessed it with status code: {response.status_code}."
            )
            sr = ScanResult(
                owasp_category=OWASP_FLAGS.BFLA.value,
                vulnerability_name="Broken Function Level Authorization",
                endpoint=endpoint,
                severity=risk_level,
                description="A low-privilege user was able to successfully access an endpoint that should only be accessible to high-privilege users (e.g., administrators).",
                recommendation="Implement and enforce robust, role-based access control checks on the server-side for every request to a sensitive function.",
                evidence=scan_evidence,
                test_name="Access Control Matrix Violation"
            )
            results.append(sr)
            print(f"[!!!] VULNERABILITY FOUND: BFLA at {method} {path} for regular user.")
        else:
            print(f"  [User Test] OK: Access correctly denied for {method} {path} with status {response.status_code}")
            
    return results