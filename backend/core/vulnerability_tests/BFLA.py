from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.owasp_flags import OWASP_FLAGS, ENDPOINT_FLAGS
import re

def test_function_level_auth(api_client, endpoints, risk_level):
    base_url = api_client.get_url()
    http_interface = HTTPInterface(base_url)
    try:
        http_interface.add_header(api_client.get_auth_header())
    except Exception:
        pass

    results = []

    def _choose_replacement(ep):
        try:
            for p in ep.parameters or []:
                pname = p.get("name", "").lower()
                schema = p.get("schema", {}) or {}
                if "id" in pname:
                    return "1" if schema.get("type") == "integer" else "11111111-1111-1111-1111-111111111111"
        except Exception:
            pass
        return "1"

    sensitive_keys_in_config = [
        "database_url", "api_key", "api_keys", "secret", "debug",
        "password", "token", "debug_mode"
    ]

    # FIX: Changed all instances of `self.endpoints` to `endpoints`
    for endpoint in endpoints:
        if OWASP_FLAGS.BFLA not in endpoint.get_flags() or OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue
            
        method = (endpoint.method or "").upper()
        path = endpoint.path or ""
        test_path = path

        if "{" in test_path:
            replacement = _choose_replacement(endpoint)
            test_path = re.sub(r"\{[^}]*\}", replacement, test_path)

        if method in ("DELETE", "POST", "PUT", "PATCH"):
            try:
                http_interface.clear_body()
                resp = http_interface.send_custom(method, test_path)
            except Exception:
                resp = None

            if resp and resp.status_code in (200, 201, 204):
                body_text = "<no-body>"
                try:
                    body_text = resp.json()
                except Exception:
                    body_text = resp.text or ""

                scan_evidence = f"Method: {method}\nPath: {test_path}\nStatus: {resp.status_code}"
                sr = ScanResult(
                    "A05:2023", # OWASP Category
                    OWASP_FLAGS.BFLA.value,
                    endpoint,
                    risk_level, # FIX: Changed from self.risk_level
                    10,
                    "Privileged function executed without proper authorization.",
                    "Enforce role/permission checks for all sensitive business functions.",
                    {"details": scan_evidence, "response": body_text},
                    "Broken Function Level Authorization (BFLA)",
                    {"status": resp.status_code}
                )
                results.append(sr)
            
            http_interface.clear_body()

    return results
