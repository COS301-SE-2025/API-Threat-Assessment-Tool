from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.owasp_flags import OWASP_FLAGS, ENDPOINT_FLAGS

def test_auth_mechanisms(api_client, endpoints, risk_level):
    results = []
    # Test authentication mechanisms
    for endpoint in endpoints:
        if OWASP_FLAGS.BKEN_AUTH not in endpoint.get_flags():
            continue
        # Send request without auth token
        http_interface = HTTPInterface(api_client.get_url())
        response = http_interface.send_custom(endpoint.method, endpoint.path)
        if response.status_code < 400:
            scan_evidence = f"Method: {endpoint.method}\nPath: {endpoint.path}\nStatus: {response.status_code}"
            sr = ScanResult(
                2,
                OWASP_FLAGS.BKEN_AUTH.value,
                endpoint,
                risk_level,
                10,
                "Authentication mechanism weakness: endpoint does not return 401 status code",
                "Implement proper authentication mechanism",
                scan_evidence,
                "Authentication bypass",
                {}
            )
            results.append(sr)
    return results

def _is_jwt(token):
    """Helper function to check if a token appears to be a JWT."""
    return isinstance(token, str) and token.count('.') == 2

def test_jwt_vulnerabilities(api_client, endpoints, risk_level):
    """
    Orchestrator for running various JWT tests against a protected endpoint.
    """
    results = []
    token = api_client.auth_token
    
    if not _is_jwt(token):
        print("[INFO] Auth token is not a JWT. Skipping JWT-specific tests.")
        return results
        
    if not endpoints:
        print("[INFO] No protected endpoints found to test JWT against.")
        return results
    
    protected_endpoint = endpoints[0]
    print(f"[*] Running JWT tests against endpoint: {protected_endpoint.method} {protected_endpoint.path}")
    
    results.extend(_test_jwt_alg_none(api_client, token, protected_endpoint, risk_level))
    results.extend(_test_jwt_weak_secret(api_client, token, protected_endpoint, risk_level))
    
    return results

def _test_jwt_alg_none(api_client, jwt_token, endpoint, risk_level):
    """
    Tests for the JWT 'alg':'none' vulnerability by sending a token with a modified header and no signature. [cite: 273]
    """
    results = []
    print("[*] Testing for JWT alg:none vulnerability...")
    try:
        header_b64, payload_b64, _ = jwt_token.split('.')
        
        header_json = json.loads(urlsafe_b64decode(header_b64 + '==').decode())
        header_json['alg'] = 'none'
        
        new_header_b64 = urlsafe_b64encode(json.dumps(header_json).encode()).rstrip(b'=').decode()
        malicious_token = f"{new_header_b64}.{payload_b64}."
        
        http_interface = HTTPInterface(api_client.get_url())
        auth_header_name = api_client.get_auth_header().split(':', 1)[0]
        http_interface.add_header(auth_header_name, f"Bearer {malicious_token}")

        response = http_interface.send_custom(endpoint.method, endpoint.path)

        if 200 <= response.status_code < 300:
            scan_evidence = (
                f"Endpoint: {endpoint.method} {endpoint.path}\n"
                f"Modified Token: Used 'alg:none' and stripped signature.\n"
                f"Result: Server accepted the forged token with status code {response.status_code}."
            )
            sr = ScanResult(
                owasp_category=OWASP_FLAGS.BKEN_AUTH.value,
                vulnerability_name="JWT Algorithm 'none' Accepted",
                endpoint=endpoint,
                severity=risk_level,
                description="The server accepts JWTs with the algorithm set to 'none' and no signature, allowing attackers to forge tokens and impersonate any user. [cite: 229]",
                recommendation="Always require a valid signature for JWTs. The token validation logic should explicitly reject any token where the 'alg' header is 'none'.",
                evidence=scan_evidence,
                test_name="JWT alg:none"
            )
            results.append(sr)
            print(f"[!!!] VULNERABILITY FOUND: JWT alg:none on {endpoint.path}")
        else:
            print("[OK] JWT alg:none test passed. Server correctly rejected the token.")

    except Exception as e:
        print(f"[WARN] Error during JWT alg:none test: {e}")
        
    return results

def _test_jwt_weak_secret(api_client, jwt_token, endpoint, risk_level):
    """
    Attempts to brute-force the HMAC secret of a JWT using a list of common weak secrets. [cite: 278]
    """
    results = []
    WEAK_SECRETS = ["secret", "password", "123456", "admin", "root", "123456789"]
    print("[*] Testing for weak JWT HMAC secret...")

    try:
        header_b64, _, _ = jwt_token.split('.')
        header_json = json.loads(urlsafe_b64decode(header_b64 + '==').decode())
        
        alg = header_json.get('alg', "")
        if not alg.startswith('HS'):
            print(f"[*] Skipping weak secret test: Token uses non-HMAC algorithm ({alg}).")
            return results
            
        for secret in WEAK_SECRETS:
            try:
                jwt.decode(jwt_token, secret, algorithms=[alg])
                
                scan_evidence = (
                    f"Endpoint: {endpoint.method} {endpoint.path}\n"
                    f"Token Algorithm: {alg}\n"
                    f"Result: The JWT signature was successfully verified using the weak secret: '{secret}'."
                )
                sr = ScanResult(
                    owasp_category=OWASP_FLAGS.BKEN_AUTH.value,
                    vulnerability_name="JWT Weak HMAC Secret",
                    endpoint=endpoint,
                    severity=risk_level,
                    description=f"The secret used to sign symmetric JWTs (e.g., HS256) is weak and was guessed to be '{secret}'. This allows an attacker to forge valid tokens for any user.",
                    recommendation="Use a strong, long, and randomly generated secret for HMAC-based JWTs. Store secrets securely and avoid using common or default values.",
                    evidence=scan_evidence,
                    test_name="JWT Weak Secret Brute-force"
                )
                results.append(sr)
                print(f"[!!!] VULNERABILITY FOUND: Weak JWT secret '{secret}' discovered.")
                return results
                
            except jwt.InvalidSignatureError:
                continue
            except Exception as e:
                print(f"[WARN] An unexpected error occurred while testing secret '{secret}': {e}")
        
        print("[OK] JWT weak secret test passed. No common weak secrets found.")
        
    except Exception as e:
        print(f"[WARN] Error during JWT weak secret test: {e}")

    return results