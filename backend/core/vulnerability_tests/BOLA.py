from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.owasp_flags import OWASP_FLAGS, ENDPOINT_FLAGS
import re

def test_id_tampering(api_client, endpoints, risk_level):
    results = []

    url = api_client.get_url()
    http_interface = HTTPInterface(url)
    http_interface.add_header(api_client.get_auth_header())

    for endpoint in endpoints:
        if OWASP_FLAGS.BOLA not in endpoint.get_flags():
            continue
        if OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue

        candidate_ids = []
        for param in endpoint.parameters:
            name = param.get("name", "")
            if "id" in name.lower():
                schema = param.get("schema", {})
                param_type = schema.get("type", "string")
                if param_type == "integer":
                    candidate_ids.extend(["1", "2", "999", "1001"])
                elif param_type == "string":
                    candidate_ids.extend([
                        "11111111-1111-1111-1111-111111111111",
                        "not-a-valid-id", "test", "123456"
                    ])

        for test_id in candidate_ids:
            test_path = endpoint.path
            if "{" in test_path:
                test_path = re.sub(r"\{[^}]*id[^}]*\}", test_id, test_path, flags=re.IGNORECASE)

            params = {}
            for param in endpoint.parameters:
                if param.get("in") == "query" and "id" in param.get("name", "").lower():
                    params[param["name"]] = test_id

            response = http_interface.send_custom(endpoint.method, test_path, params=params)

            if response.status_code == 200:
                scan_evidence = f"Method: {endpoint.method}\nPath: {test_path}\nParameters: {params}"
                sr = ScanResult(
                    1,
                    OWASP_FLAGS.BOLA.value,
                    endpoint,
                    risk_level,
                    10,
                    "Endpoint allows us to access data of other users by tampering with id's",
                    "Properly authenticate before returning data",
                    scan_evidence,
                    "Basic ID tampering",
                    params
                )
                results.append(sr)
            elif response.status_code == 401:
                endpoint.add_flag(ENDPOINT_FLAGS.FAILED)

    return results
