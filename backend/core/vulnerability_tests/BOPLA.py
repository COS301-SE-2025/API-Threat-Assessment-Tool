from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.owasp_flags import OWASP_FLAGS, ENDPOINT_FLAGS
import re

def test_property_level_issues(api_client, endpoints, risk_level):
    base_url = api_client.get_url()
    http_interface = HTTPInterface(base_url)
    try:
        http_interface.add_header(api_client.get_auth_header())
    except Exception:
        pass
    results = []

    test_payload = {
        "role": "admin",
        "is_admin": True,
        "ssn": "999-99-9999",
        "password": "Compromised123!",
        "internal_notes": "injected_by_scanner"
    }

    try:
        http_interface.add_header("Content-Type: application/json")
    except Exception:
        pass

    for endpoint in endpoints:
        if OWASP_FLAGS.BOPLA not in endpoint.get_flags():
            continue
        if OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue

        path = endpoint.path
        test_path = path
        if "{" in test_path:
            replacement = "1"
            try:
                for p in endpoint.parameters:
                    if "id" in p.get("name", "").lower():
                        schema = p.get("schema", {})
                        if schema.get("type") == "integer":
                            replacement = "1"
                        elif schema.get("type") == "string":
                            replacement = "11111111-1111-1111-1111-111111111111"
                        break
            except Exception:
                replacement = "1"
            test_path = re.sub(r"\{[^}]*id[^}]*\}", replacement, test_path, flags=re.IGNORECASE)

        # Excessive Data Exposure
        if endpoint.method.upper() in ("GET", "HEAD", "OPTIONS"):
            try:
                resp = http_interface.send_custom(endpoint.method, test_path)
                if resp.status_code == 200:
                    content_type = resp.headers.get("Content-Type", "")
                    if "application/json" in content_type:
                        try:
                            body_json = resp.json()
                        except Exception:
                            body_json = None
                        if isinstance(body_json, dict):
                            found = []
                            for k in body_json.keys():
                                if any(sp in k.lower() for sp in ["ssn","social","password","role","is_admin","internal","profit","credit","card","secret","token"]):
                                    found.append(k)
                            if found:
                                scan_evidence = f"Method: {endpoint.method}\nPath: {test_path}\nReturned fields: {found}"
                                sr = ScanResult(
                                    3,
                                    OWASP_FLAGS.BOPLA.value,
                                    endpoint,
                                    risk_level,
                                    9,
                                    "Endpoint returns sensitive fields in responses (excessive data exposure).",
                                    "Implement response filtering/allow-listing and remove sensitive fields from API responses.",
                                    scan_evidence,
                                    "Excessive Data Exposure - top-level sensitive properties returned",
                                    {"returned_fields": found}
                                )
                                results.append(sr)
            except Exception:
                continue

        # Mass-assignment
        if endpoint.method.upper() in ("PATCH","PUT","POST"):
            try:
                http_interface.set_body(test_payload)
                resp = http_interface.send_custom(endpoint.method, test_path)
                if resp.status_code in (200,201,202,203,204):
                    echoed = []
                    if "application/json" in resp.headers.get("Content-Type",""):
                        try:
                            body_json = resp.json()
                        except Exception:
                            body_json = None
                        if isinstance(body_json, dict):
                            for key,val in test_payload.items():
                                if key in body_json and body_json.get(key) == val:
                                    echoed.append(key)
                    if echoed:
                        scan_evidence = f"Method: {endpoint.method}\nPath: {test_path}\nAttempted to set: {list(test_payload.keys())}\nServer echoed/accepted: {echoed}\nStatus: {resp.status_code}"
                        sr = ScanResult(
                            3,
                            OWASP_FLAGS.BOPLA.value,
                            endpoint,
                            risk_level,
                            10,
                            "Endpoint allows modification or returns sensitive properties (mass-assignment / excessive exposure).",
                            "Use allow-lists for writable fields, validate and sanitize request bodies, and remove sensitive fields from responses.",
                            scan_evidence,
                            "Mass assignment / excessive data exposure combined test",
                            {"attempted_payload": test_payload, "accepted_fields": echoed}
                        )
                        results.append(sr)
            finally:
                http_interface.clear_body()

    return results
