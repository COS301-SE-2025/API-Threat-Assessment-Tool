# core/vulnerability_tests/BOPLA.py

from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.owasp_flags import OWASP_FLAGS, ENDPOINT_FLAGS
import re
import json

# --- Original function, preserved for unit tests ---
def test_property_level_issues(api_client, endpoints, risk_level):
    base_url = api_client.get_url()
    http_interface = HTTPInterface(base_url)
    try:
        http_interface.add_header(api_client.get_auth_header())
    except Exception:
        pass
    results = []

    test_payload = {
        "role": "admin",
        "is_admin": True,
        "ssn": "999-99-9999",
        "password": "Compromised123!",
        "internal_notes": "injected_by_scanner"
    }

    try:
        http_interface.add_header("Content-Type: application/json")
    except Exception:
        pass

    for endpoint in endpoints:
        if OWASP_FLAGS.BOPLA not in endpoint.get_flags():
            continue
        if OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue

        path = endpoint.path
        test_path = path
        if "{" in test_path:
            replacement = "1"
            try:
                for p in endpoint.parameters:
                    if "id" in p.get("name", "").lower():
                        schema = p.get("schema", {})
                        if schema.get("type") == "integer":
                            replacement = "1"
                        elif schema.get("type") == "string":
                            replacement = "11111111-1111-1111-1111-111111111111"
                        break
            except Exception:
                replacement = "1"
            test_path = re.sub(r"\{[^}]*id[^}]*\}", replacement, test_path, flags=re.IGNORECASE)

        # Excessive Data Exposure
        if endpoint.method.upper() in ("GET", "HEAD", "OPTIONS"):
            try:
                resp = http_interface.send_custom(endpoint.method, test_path)
                if resp.status_code == 200:
                    content_type = resp.headers.get("Content-Type", "")
                    if "application/json" in content_type:
                        try:
                            body_json = resp.json()
                        except Exception:
                            body_json = None
                        if isinstance(body_json, dict):
                            found = []
                            for k in body_json.keys():
                                if any(sp in k.lower() for sp in ["ssn","social","password","role","is_admin","internal","profit","credit","card","secret","token"]):
                                    found.append(k)
                            if found:
                                scan_evidence = f"Method: {endpoint.method}\nPath: {test_path}\nReturned fields: {found}"
                                sr = ScanResult(
                                    owasp_category=OWASP_FLAGS.BOPLA.value,
                                    vulnerability_name="Excessive Data Exposure",
                                    endpoint=endpoint,
                                    severity=risk_level,
                                    description="Endpoint returns sensitive fields in responses (excessive data exposure).",
                                    recommendation="Implement response filtering/allow-listing and remove sensitive fields from API responses.",
                                    evidence=scan_evidence,
                                    test_name="Excessive Data Exposure - top-level sensitive properties returned",
                                    affected_params={"returned_fields": found}
                                )
                                results.append(sr)
            except Exception:
                continue

        # Mass-assignment
        if endpoint.method.upper() in ("PATCH","PUT","POST"):
            try:
                http_interface.set_body(test_payload)
                resp = http_interface.send_custom(endpoint.method, test_path)
                if resp.status_code in (200,201,202,203,204):
                    echoed = []
                    if "application/json" in resp.headers.get("Content-Type",""):
                        try:
                            body_json = resp.json()
                        except Exception:
                            body_json = None
                        if isinstance(body_json, dict):
                            for key,val in test_payload.items():
                                if key in body_json and body_json.get(key) == val:
                                    echoed.append(key)
                    if echoed:
                        scan_evidence = f"Method: {endpoint.method}\nPath: {test_path}\nAttempted to set: {list(test_payload.keys())}\nServer echoed/accepted: {echoed}\nStatus: {resp.status_code}"
                        sr = ScanResult(
                            owasp_category=OWASP_FLAGS.BOPLA.value,
                            vulnerability_name="Mass Assignment (Response Reflection)",
                            endpoint=endpoint,
                            severity=risk_level,
                            description="Endpoint allows modification or returns sensitive properties (mass-assignment / excessive exposure).",
                            recommendation="Use allow-lists for writable fields, validate and sanitize request bodies, and remove sensitive fields from responses.",
                            evidence=scan_evidence,
                            test_name="Mass assignment / excessive data exposure combined test",
                            affected_params={"attempted_payload": test_payload, "accepted_fields": echoed}
                        )
                        results.append(sr)
            finally:
                http_interface.clear_body()

    return results


# --- New, advanced stateful test for Mass Assignment ---
def test_mass_assignment_stateful(api_client, resource_groups, risk_level):
    """
    Performs a stateful test for Mass Assignment (GET -> PATCH -> GET).
    """
    results = []
    http_interface = HTTPInterface(api_client.get_url())
    http_interface.add_header(api_client.get_auth_header())
    http_interface.add_header("Content-Type", "application/json")

    fuzz_payload = {"isAdmin": True, "role": "administrator", "isPremiumUser": True}

    for base_path, methods in resource_groups.items():
        # A full flow requires POST (create), a modifier (PUT/PATCH), and GET (verify)
        if not ('POST' in methods and 'GET' in methods and ('PUT' in methods or 'PATCH' in methods)):
            continue
        
        post_endpoint = methods['POST']
        get_endpoint = methods['GET']
        patch_endpoint = methods.get('PATCH') or methods.get('PUT')
        print(f"[*] Starting stateful BOPLA test for resource: {base_path}")

        try:
            # 1. CREATE a temporary resource
            create_resp = http_interface.send_post(post_endpoint.path, json={"name": "scanner_test_obj"})
            if create_resp.status_code not in [200, 201]: continue
            
            item_id = create_resp.json().get('id')
            if not item_id: continue
            
            get_path = get_endpoint.path.replace('{id}', str(item_id)) # Simple replacement

            # 2. Get BASELINE state
            baseline_resp = http_interface.send_get(get_path)
            if baseline_resp.status_code != 200: continue
            baseline_obj = baseline_resp.json()

            # 3. ATTACK by attempting to modify with privileged properties
            patch_path = patch_endpoint.path.replace('{id}', str(item_id))
            http_interface.send_custom(patch_endpoint.method, patch_path, json=fuzz_payload)

            # 4. VERIFY the final state
            verify_resp = http_interface.send_get(get_path)
            if verify_resp.status_code != 200: continue
            verified_obj = verify_resp.json()

            successful_injections = []
            for key, value in fuzz_payload.items():
                if verified_obj.get(key) == value and baseline_obj.get(key) != value:
                    successful_injections.append(key)
            
            if successful_injections:
                scan_evidence = (
                    f"Resource Path: {base_path}\n"
                    f"Test Flow: CREATE -> GET -> PATCH -> GET\n"
                    f"Injected Payload: {fuzz_payload}\n"
                    f"Successfully modified unauthorized properties: {', '.join(successful_injections)}"
                )
                sr = ScanResult(
                    owasp_category=OWASP_FLAGS.BOPLA.value,
                    vulnerability_name="Mass Assignment (Stateful)",
                    endpoint=patch_endpoint,
                    severity="High",
                    description="The endpoint allows modification of sensitive properties. The change was verified by re-fetching the object, confirming the vulnerability.",
                    recommendation="Do not bind incoming data directly to internal objects. Use an allow-list of properties that can be updated. Use Data Transfer Objects (DTOs) with specific properties for user input.",
                    evidence=scan_evidence,
                    test_name="Stateful Mass Assignment",
                    affected_params={"injected_properties": successful_injections}
                )
                results.append(sr)
        except Exception as e:
            print(f"[WARN] Error during stateful mass assignment test for {base_path}: {e}")
            continue
            
    return results