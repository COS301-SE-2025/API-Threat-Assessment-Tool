from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.vulnerability_test import OWASP_FLAGS
import re

def test_inventory(api_client, endpoints, risk_level):
    print("Starting IIM Test")
    base_url = api_client.get_url()
    http_interface = HTTPInterface(base_url)
    try:
        http_interface.add_header(api_client.get_auth_header())
    except Exception:
        pass
    results = []

    sensitive_field_indicators = {"password", "secret", "auth_bypass", "api_key", "api_keys", "token"}

    def _choose_replacement(ep):
        try:
            for p in ep.parameters or []:
                pname = p.get("name", "").lower()
                schema = p.get("schema", {}) or {}
                if "id" in pname:
                    if schema.get("type") == "integer":
                        return "1"
                    else:
                        return "11111111-1111-1111-1111-111111111111"
        except Exception:
            pass
        return "1"

    for endpoint in endpoints:
        if OWASP_FLAGS.IIM not in endpoint.get_flags():
            continue
        if OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue

        method = (endpoint.method or "GET").upper()
        test_path = endpoint.path or ""
        if "{" in test_path:
            test_path = re.sub(r"\{[^}]*\}", _choose_replacement(endpoint), test_path)

        try:
            resp = http_interface.send_custom(method, test_path)
        except Exception:
            resp = None
        if not resp:
            continue

        try:
            body = resp.json()
        except Exception:
            body = None

        if isinstance(body, dict):
            found_secrets = [k for k in body.keys() if any(sf in k.lower() for sf in sensitive_field_indicators)]
            if found_secrets:
                scan_evidence = f"Method: {method}\nPath: {test_path}\nExposed fields: {found_secrets}"
                sr = ScanResult(
                    9,
                    OWASP_FLAGS.IIM.value,
                    endpoint,
                    risk_level,
                    6,
                    "Endpoint exposes sensitive inventory or legacy test data (secrets/passwords).",
                    "Remove secrets and deprecated test data from production endpoints; enforce inventory hygiene.",
                    scan_evidence,
                    "Exposed secrets / legacy data",
                    {"exposed_fields": found_secrets}
                )
                results.append(sr)

    return results
