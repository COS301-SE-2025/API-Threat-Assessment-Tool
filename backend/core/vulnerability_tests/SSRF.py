from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.owasp_flags import OWASP_FLAGS, ENDPOINT_FLAGS

def test_ssrf(api_client, endpoints, risk_level):
    base_url = api_client.get_url()
    http_interface = HTTPInterface(base_url)
    try:
        http_interface.add_header(api_client.get_auth_header())
    except Exception:
        pass
    results = []

    ssrf_payloads = ["http://127.0.0.1", "http://localhost", "https://www.google.com"]

    for endpoint in endpoints:
        if OWASP_FLAGS.SSRF not in endpoint.get_flags():
            continue
        if OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue

        method = (endpoint.method or "").upper()
        path = endpoint.path or ""

        if method == "GET":
            for payload in ssrf_payloads:
                sep = "&" if "?" in path else "?"
                test_path = f"{path}{sep}url={payload}"
                resp = http_interface.send_custom("GET", test_path)
                if resp and resp.status_code < 500 and payload in resp.text:
                    sr = ScanResult(
                        7,
                        OWASP_FLAGS.SSRF.value,
                        endpoint,
                        risk_level,
                        9,
                        "Endpoint appears vulnerable to SSRF.",
                        "Validate and restrict outgoing requests to allowed hosts.",
                        f"Sent {payload}, received status {resp.status_code}",
                        "SSRF confirmed",
                        {"payload": payload, "status": resp.status_code}
                    )
                    results.append(sr)

        elif method == "POST":
            for payload in ssrf_payloads:
                body = {"url": payload}
                resp = http_interface.send_custom("POST", path, json=body)
                if resp and resp.status_code < 500 and payload in resp.text:
                    sr = ScanResult(
                        7,
                        OWASP_FLAGS.SSRF.value,
                        endpoint,
                        risk_level,
                        9,
                        "Endpoint appears vulnerable to SSRF.",
                        "Validate and restrict outgoing requests to allowed hosts.",
                        f"Sent {payload}, received status {resp.status_code}",
                        "SSRF confirmed",
                        {"payload": payload, "status": resp.status_code}
                    )
                    results.append(sr)

    return results
