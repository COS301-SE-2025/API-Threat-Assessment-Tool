# core/vulnerability_tests/UABF.py

from core.scan_result import ScanResult
from core.http_interface import HTTPInterface
from core.owasp_flags import OWASP_FLAGS
import threading

def test_business_flows(api_client, endpoints, risk_level):
    results = []
    for endpoint in endpoints:
        if OWASP_FLAGS.UABF not in endpoint.get_flags() or OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue

        http_interface = HTTPInterface(api_client.get_url())
        response = http_interface.send_custom(endpoint.method, endpoint.path)
        if response.status_code == 200:
            scan_evidence = f"Method: {endpoint.method}\nPath: {endpoint.path}\nStatus: {response.status_code}"
            sr = ScanResult(
                owasp_category=OWASP_FLAGS.UABF.value,
                vulnerability_name="6. Sensitive Flow Unauthenticated",
                endpoint=endpoint,
                severity=risk_level,
                description="Unrestricted access to sensitive business flows: endpoint accessible without authentication",
                recommendation="Implement proper authentication and authorization for all sensitive business flows.",
                evidence=scan_evidence,
                test_name="Unauthenticated Access to Business Flow"
            )
            results.append(sr)
    return results

def test_for_abuse_controls(api_client, endpoints, risk_level):
    """
    Tests sensitive business flow endpoints for missing controls like rate limiting.
    """
    results = []
    num_requests = 100 # Number of concurrent requests to simulate a bot

    for endpoint in endpoints:
        if OWASP_FLAGS.SKIP in endpoint.get_flags():
            continue
            
        print(f"[*] Starting business flow abuse test (rate limit) on {endpoint.method} {endpoint.path}...")
        responses = []
        
        def send_request():
            http_interface = HTTPInterface(api_client.get_url())
            http_interface.add_header(api_client.get_auth_header())
            # For POST/PUT, a minimal body might be needed
            if endpoint.method.upper() in ["POST", "PUT"]:
                response = http_interface.send_custom(endpoint.method, endpoint.path, json={})
            else:
                response = http_interface.send_custom(endpoint.method, endpoint.path)
            responses.append(response)

        threads = [threading.Thread(target=send_request) for _ in range(num_requests)]
        for t in threads: t.start()
        for t in threads: t.join()

        status_codes = [r.status_code for r in responses if r is not None]
        if not status_codes: continue

        if 429 not in status_codes:
            scan_evidence = (
                f"Sent {num_requests} concurrent requests to the sensitive business endpoint: {endpoint.method} {endpoint.path}.\n"
                f"Received status codes: {dict((i, status_codes.count(i)) for i in set(status_codes))}.\n"
                f"The server did not respond with a 429 'Too Many Requests', indicating a lack of rate limiting."
            )
            sr = ScanResult(
                owasp_category=OWASP_FLAGS.UABF.value,
                vulnerability_name="6. Missing Rate Limiting on Sensitive Business Flow",
                endpoint=endpoint,
                severity="High",
                description="The sensitive business flow does not have adequate rate limiting to protect against automated abuse. This could enable attacks like ticket scalping, spamming, or inventory hoarding.",
                recommendation="Implement strict rate limiting on all sensitive business-critical endpoints. Consider more advanced bot detection mechanisms for critical flows.",
                evidence=scan_evidence,
                test_name="Business Flow Rate Limit Test"
            )
            results.append(sr)
            print(f"[!!!] VULNERABILITY FOUND: Missing rate limiting on sensitive flow {endpoint.path}")
        else:
            print(f"[OK] Rate limiting appears to protect the sensitive flow at {endpoint.path}")
            
    return results