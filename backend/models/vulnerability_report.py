# Struct / Class representing the report format
# Still need to research this

from core.scan_result import ScanResult
class VulnerabilityReport:
    def __init__(self):
        self.scan_results = []
        self.scan_summary = {}
        self.recommendations = []

    def add_scan_result(self, result: ScanResult):
        self.scan_results.append(result)

    def generate_scan_summary(self):
        self.scan_summary = {
            "total_vulnerabilities": len(self.scan_results),
            "high_risk": len([result for result in self.scan_results if result.severity == "High"]),
            "medium_risk": len([result for result in self.scan_results if result.severity == "Medium"]),
            "low_risk": len([result for result in self.scan_results if result.severity == "Low"])
        }

    def generate_recommendations(self):
        self.recommendations = [result.recommendation for result in self.scan_results]

    def get_scan_summary(self):
        return self.scan_summary

    def get_recommendations(self):
        return self.recommendations

    def generate_report(self):
        report = "Vulnerability Report:\n\n"
        report += "Scan Summary:\n"
        report += f"Total Vulnerabilities: {self.scan_summary['total_vulnerabilities']}\n"
        report += f"High Risk: {self.scan_summary['high_risk']}\n"
        report += f"Medium Risk: {self.scan_summary['medium_risk']}\n"
        report += f"Low Risk: {self.scan_summary['low_risk']}\n\n"
        report += "Vulnerabilities:\n"
        for result in self.scan_results:
            report += f"Vulnerability: {result.vulnerability_name}\n"
            report += f"Severity: {result.severity}\n"
            report += f"Description: {result.description}\n"
            report += f"Recommendation: {result.recommendation}\n\n"
        return report
